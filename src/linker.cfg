#=============================================================================#
# Copyright 2022 Matthew D. Steele <mdsteele@alum.mit.edu>                    #
#                                                                             #
# This file is part of Annalog.                                               #
#                                                                             #
# Annalog is free software: you can redistribute it and/or modify it under    #
# the terms of the GNU General Public License as published by the Free        #
# Software Foundation, either version 3 of the License, or (at your option)   #
# any later version.                                                          #
#                                                                             #
# Annalog is distributed in the hope that it will be useful, but WITHOUT ANY  #
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   #
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more      #
# details.                                                                    #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with Annalog.  If not, see <http://www.gnu.org/licenses/>.                  #
#=============================================================================#

# NES memory layout.  See https://www.nesdev.org/wiki/CPU_memory_map and
# https://www.nesdev.org/wiki/INES.
MEMORY {
  # RAM (separated into pages, to help control layout):
  ZP:    start=$0000, size=$0100, type=rw, file="";
  STACK: start=$0100, size=$0100, type=rw, file="";
  RAM_2: start=$0200, size=$0100, type=rw, file="";
  RAM_3: start=$0300, size=$0100, type=rw, file="";
  RAM_4: start=$0400, size=$0100, type=rw, file="";
  RAM_5: start=$0500, size=$0100, type=rw, file="";
  RAM_6: start=$0600, size=$0100, type=rw, file="";
  RAM_7: start=$0700, size=$0100, type=rw, file="";
  SRAM:  start=$6000, size=$2000, type=rw, file="";
  # The NES 2.0 ROM file header:
  HDR: start=$0000, size=$0010, type=ro, file=%O, fill=yes;
  # Program data (separated into swappable and fixed banks for MMC3):
  PRGC_00: bank=$00, start=$c000, size=$2000, type=ro, file=%O, fill=yes;
  PRGA_00: bank=$01, start=$a000, size=$2000, type=ro, file=%O, fill=yes;
  PRGC_01: bank=$02, start=$c000, size=$2000, type=ro, file=%O, fill=yes;
  PRGA_01: bank=$03, start=$a000, size=$2000, type=ro, file=%O, fill=yes;
  PRGC_02: bank=$04, start=$c000, size=$2000, type=ro, file=%O, fill=yes;
  PRGA_02: bank=$05, start=$a000, size=$2000, type=ro, file=%O, fill=yes;
  PRG8: start=$8000, size=$2000, type=ro, file=%O, fill=yes;
  PRGE: start=$e000, size=$2000, type=ro, file=%O, fill=yes;
  # Character (graphics) data (separated into swappable banks for MMC3):
  CHR_00: bank=$00, start=$0000, size=$0400, type=ro, file=%O, fill=yes;
  CHR_01: bank=$01, start=$0000, size=$0400, type=ro, file=%O, fill=yes;
  CHR_02: bank=$02, start=$0000, size=$0400, type=ro, file=%O, fill=yes;
  CHR_03: bank=$03, start=$0000, size=$0400, type=ro, file=%O, fill=yes;
  CHR_04: bank=$04, start=$0000, size=$0400, type=ro, file=%O, fill=yes;
  CHR_05: bank=$05, start=$0000, size=$0400, type=ro, file=%O, fill=yes;
  CHR_06: bank=$06, start=$0000, size=$0400, type=ro, file=%O, fill=yes;
  CHR_07: bank=$07, start=$0000, size=$0400, type=ro, file=%O, fill=yes;
  CHR_08: bank=$08, start=$0000, size=$0400, type=ro, file=%O, fill=yes;
  CHR_09: bank=$08, start=$0000, size=$0400, type=ro, file=%O, fill=yes;
  CHR_0A: bank=$0a, start=$0000, size=$0800, type=ro, file=%O, fill=yes;
  CHR_0C: bank=$0c, start=$0000, size=$0800, type=ro, file=%O, fill=yes;
  CHR_0E: bank=$0e, start=$0000, size=$0800, type=ro, file=%O, fill=yes;
}

# Segments for this particular NES ROM.
SEGMENTS {
  ZEROPAGE: load=ZP, type=zp;
  RAM_PpuTransfer: load=STACK, type=bss, start=$0100;
  RAM_Oam:      load=RAM_2, type=bss, align=$100;
  RAM_Actor:    load=RAM_3, type=bss;
  RAM_Platform: load=RAM_3, type=bss;
  RAM_Machine:  load=RAM_4, type=bss;
  RAM_Device:   load=RAM_5, type=bss;
  RAM_Console:  load=RAM_6, type=bss;
  RAM_Menu:     load=RAM_6, type=bss;
  RAM_Irq:      load=RAM_7, type=bss;
  SRAM: load=SRAM, type=bss;
  HEADER: load=HDR, type=ro;
  # Swappable-bank PRG segments:
  PRGC_Prison:  load=PRGC_00, type=ro;
  PRGC_Town:    load=PRGC_01, type=ro;
  PRGA_Reset:   load=PRGA_00, type=ro;
  PRGA_Dialog:  load=PRGA_00, type=ro;
  PRGA_Objects: load=PRGA_00, type=ro;
  PRGA_Pause:   load=PRGA_00, type=ro;
  PRGA_Room:    load=PRGA_00, type=ro;
  PRGA_Title:   load=PRGA_00, type=ro;
  PRGA_Upgrade: load=PRGA_00, type=ro;
  PRGA_Terrain: load=PRGA_01, type=ro;
  PRGA_Avatar:  load=PRGA_01, type=ro;
  PRGA_Console: load=PRGA_02, type=ro;
  # Fixed-bank PRG segments:
  PRG8:        load=PRG8, type=ro;
  PRGE_Reset:  load=PRGE, type=ro;
  PRGE_Nmi:    load=PRGE, type=ro;
  PRGE_Irq:    load=PRGE, type=ro;
  PRGE_Vector: load=PRGE, type=ro, start=$fffa;
  # Single-bank CHR segments:
  CHR_FontUpper:   load=CHR_00, type=ro;
  CHR_FontLower01: load=CHR_01, type=ro;
  CHR_FontLower02: load=CHR_02, type=ro;
  CHR_FontLower03: load=CHR_03, type=ro;
  CHR_Cave:        load=CHR_04, type=ro;
  CHR_Indoors:     load=CHR_05, type=ro;
  CHR_Outdoors:    load=CHR_06, type=ro;
  CHR_Pause:       load=CHR_07, type=ro;
  CHR_Title:       load=CHR_08, type=ro;
  # Double-bank CHR segments:
  CHR_Player:      load=CHR_0A, type=ro;
  CHR_Townsfolk:   load=CHR_0C, type=ro;
  CHR_Upgrade:     load=CHR_0E, type=ro;
}
